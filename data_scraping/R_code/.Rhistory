GPU_Price$CurrentDate <- as.Date(GPU_Price$CurrentDate, format = "%d %b %y")
sum(duplicated(GPU_R$GPU))
sum(duplicated(GPU_Price$GPU))
GPU_R$Link <- NULL
GPU_Price$Link <- NULL
GPU_R$DATE <- NULL
GPU_R$ReleaseDate <- NULL
GPU_complete <- left_join(GPU_R, GPU_Price, by = "GPU")
View(GPU_complete)
GPU_complete$ReleasePrice <- dplyr::na_if(GPU_complete$ReleasePrice, "")
GPU_complete$CurrentPrice <- dplyr::na_if(GPU_complete$CurrentPrice, "")
GPU_complete$Year <- year(GPU_complete$ReleaseDate)
GPU_complete$Quarters <- quarter(GPU_complete$ReleaseDate)
View(GPU_complete)
GPU_complete <- GPU_complete %>%
filter(!is.na(ReleaseDate) & ReleaseDate != "")
# ---GPU---
GPU_R <- read.csv(file = "../scraped_data/gpu_data_r.csv")
GPU_Price <- read.csv(file = "../scraped_data/GPU_price_data.csv")
GPU_Price <- rename(GPU_Price, GPU = Name)
GPU_R <- rename(GPU_R, GPU = Name)
GPU_R <- distinct(GPU_R, GPU, .keep_all = TRUE)
GPU_Price <- distinct(GPU_Price, GPU, .keep_all = TRUE)
GPU_Price$ReleaseDate <- as.Date(GPU_Price$ReleaseDate, format = "%d %b %y")
GPU_Price$CurrentDate <- as.Date(GPU_Price$CurrentDate, format = "%d %b %y")
sum(duplicated(GPU_R$GPU))
sum(duplicated(GPU_Price$GPU))
GPU_R$Link <- NULL
GPU_Price$Link <- NULL
GPU_R$DATE <- NULL
GPU_R$ReleaseDate <- NULL
GPU_complete <- left_join(GPU_R, GPU_Price, by = "GPU")
GPU_complete$ReleasePrice <- dplyr::na_if(GPU_complete$ReleasePrice, "")
GPU_complete$CurrentPrice <- dplyr::na_if(GPU_complete$CurrentPrice, "")
GPU_complete$Year <- year(GPU_complete$ReleaseDate)
GPU_complete$Quarters <- quarter(GPU_complete$ReleaseDate)
GPU_complete2 <- GPU_complete %>%
filter(!is.na(ReleaseDate) & ReleaseDate != "")
GPU_complete <- GPU_complete %>%
filter(!is.na(ReleaseDate))
View(GPU_complete)
# ---GPU---
GPU_R <- read.csv(file = "../scraped_data/gpu_data_r.csv")
GPU_Price <- read.csv(file = "../scraped_data/GPU_price_data.csv")
GPU_Price <- rename(GPU_Price, GPU = Name)
GPU_R <- rename(GPU_R, GPU = Name)
GPU_R <- distinct(GPU_R, GPU, .keep_all = TRUE)
GPU_Price <- distinct(GPU_Price, GPU, .keep_all = TRUE)
GPU_Price$ReleaseDate <- as.Date(GPU_Price$ReleaseDate, format = "%d %b %y")
GPU_Price$CurrentDate <- as.Date(GPU_Price$CurrentDate, format = "%d %b %y")
sum(duplicated(GPU_R$GPU))
sum(duplicated(GPU_Price$GPU))
GPU_R$Link <- NULL
GPU_Price$Link <- NULL
GPU_R$DATE <- NULL
GPU_R$ReleaseDate <- NULL
GPU_complete <- left_join(GPU_R, GPU_Price, by = "GPU")
GPU_complete$ReleasePrice <- dplyr::na_if(GPU_complete$ReleasePrice, "")
GPU_complete$CurrentPrice <- dplyr::na_if(GPU_complete$CurrentPrice, "")
GPU_complete$Year <- year(GPU_complete$ReleaseDate)
GPU_complete$Quarters <- quarter(GPU_complete$ReleaseDate)
GPU_complete <- GPU_complete %>%
filter(!is.na(ReleaseDate))
GPU_complete <- GPU_complete %>%
mutate(ReleaseQuarterYear = paste0(Year, "-", ifelse(Quarters == "Q1", "03-31",
ifelse(Quarters == "Q2", "06-30",
ifelse(Quarters == "Q3", "09-30", "12-31")))),
ReleaseQuarterYear = as.Date(ReleaseQuarterYear, format = "%Y-%m-%d"))
GPU_complete$ReleaseQuarterYear <- as.character(GPU_complete$ReleaseQuarterYear)
GPU_complete$ReleaseDate <- as.character(GPU_complete$ReleaseDate)
GPU_complete$CurrentDate <- as.character(GPU_complete$CurrentDate)
GPU_complete <- GPU_complete %>%
mutate(ReleaseDate = ifelse(is.na(ReleaseDate) | ReleaseDate == "", ReleaseQuarterYear, ReleaseDate),
CurrentDate = ifelse(is.na(CurrentDate) | CurrentDate == "", ReleaseQuarterYear, CurrentDate))
GPU_complete$ReleaseQuarterYear <- NULL
GPU_complete$CurrentPrice1 <- NULL
GPU_complete$Quarters <- NULL
GPU_complete$Year <- NULL
GPU_complete$ReleaseDate <- as.Date(GPU_complete$ReleaseDate, format = "%Y-%m-%d")
GPU_complete$CurrentDate <- as.Date(GPU_complete$CurrentDate, format = "%Y-%m-%d")
GPU_complete$ReleasePrice <- as.numeric(gsub(",", "", GPU_complete$ReleasePrice))
GPU_complete$CurrentPrice <- as.numeric(gsub(",", "", GPU_complete$CurrentPrice))
GPU_complete$Score <- as.numeric(gsub(",", "", GPU_complete$Score))
GPU_complete <- GPU_complete[!grepl("RTX A|quadro|WX|FirePro|NVS|Tesla", GPU_complete$GPU, ignore.case = TRUE), ]
GPU_complete$Year <- year(GPU_complete$ReleaseDate)
# Calculate the number of GPUs for each year
GPU_counts <- GPU_complete %>%
mutate(Year = year(ReleaseDate)) %>%
group_by(Year) %>%
summarise(Count = n())
# Define a threshold for the minimum number of GPUs a year should have
threshold <- 10
# Group the years with fewer GPUs than the threshold together
GPU_counts$GroupedYear <- cumsum(GPU_counts$Count >= threshold)
# Join the grouped years back to the original data
GPU_complete <- GPU_complete %>%
left_join(GPU_counts %>% select(Year, GroupedYear), by = "Year")
# Calculate the quantiles for each group of years
GPU_complete <- GPU_complete %>%
group_by(GroupedYear) %>%
mutate(
Quantile = cut(
ReleasePrice,
breaks = c(-Inf, quantile(ReleasePrice, probs = c(0.33, 0.66)), Inf),
labels = c("First Quantile", "Second Quantile", "Third Quantile"),
include.lowest = TRUE
)
)
GPU_complete$Year <- NULL
GPU_complete$GroupedYear <- NULL
write.csv(GPU_complete, file = "../final_data_no_inflation/GPU.csv")
setwd("C:/thesis_PC_LTE/data_scraping/R_code")
source("C:/thesis_PC_LTE/data_scraping/R_code/Inflation.R", echo=TRUE)
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("lubridate")) install.packages("lubridate")
if (!require("dplyr")) install.packages("dplyr")
if (!require("purrr")) install.packages("purr")
if (!require("broom")) install.packages("broom")
# Read the data
CPU <- read.csv("../final_data/CPU.csv")
GPU <- read.csv("../final_data/GPU.csv")
Disk <- read.csv("../final_data/Disk.csv")
Memory <- read.csv("../final_data/Memory.csv")
# Convert 'ReleaseDate' and 'CurrentDate' to Date objects and create 'Log_Score'
CPU <- CPU %>%
mutate(
ReleaseDate = as.Date(ReleaseDate),
CurrentDate = as.Date(CurrentDate),
Log_Score = log(Score)
)
# Fit a linear regression model for each quartile and collect coefficients
models <- CPU %>%
group_by(Quartile) %>%
do(model = lm(Log_Score ~ ReleaseDate, data = .))
# Convert 'ReleaseDate' and 'CurrentDate' to Date objects and create 'Log_Score'
CPU <- CPU %>%
mutate(
ReleaseDate = as.Date(ReleaseDate),
CurrentDate = as.Date(CurrentDate),
Log_Score = log(Score)
)
# Fit a linear regression model for each quartile and collect coefficients
models <- CPU %>%
group_by(Quantile) %>%
do(model = lm(Log_Score ~ ReleaseDate, data = .))
# Get the summary of each model and tidy it up into a data frame
model_summaries <- models %>%
pull(model) %>%
map(~ summary(.x)) %>%
map_dfr(~ tidy(.x), .id = "Quartile")
# Print the model summaries for each quartile
print(model_summaries)
# Plot the regression line and data for each quartile
ggplot(CPU, aes(x = ReleaseDate, y = Log_Score, color = Quartile)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", aes(fill = Quartile), se = FALSE) +
scale_color_manual(values = c("red", "green", "blue")) +
scale_fill_manual(values = c("red", "green", "blue")) +
labs(title = "CPU: Log Score vs. Release Date",
x = "Release date", y = "Log Score") +
theme_minimal()
# Plot the regression line and data for each quartile
ggplot(CPU, aes(x = ReleaseDate, y = Log_Score, color = Quantile)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", aes(fill = Quartile), se = FALSE) +
scale_color_manual(values = c("red", "green", "blue")) +
scale_fill_manual(values = c("red", "green", "blue")) +
labs(title = "CPU: Log Score vs. Release Date",
x = "Release date", y = "Log Score") +
theme_minimal()
# Plot the regression line and data for each quartile
ggplot(CPU, aes(x = ReleaseDate, y = Log_Score, color = Quantile)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", aes(fill = Quantile), se = FALSE) +
scale_color_manual(values = c("red", "green", "blue")) +
scale_fill_manual(values = c("red", "green", "blue")) +
labs(title = "CPU: Log Score vs. Release Date",
x = "Release date", y = "Log Score") +
theme_minimal()
# Convert 'ReleaseDate' and 'CurrentDate' to Date objects and create 'Log_Score'
GPU <- GPU %>%
mutate(
ReleaseDate = as.Date(ReleaseDate),
CurrentDate = as.Date(CurrentDate),
Log_Score = log(Score)
)
# Fit a linear regression model for each quartile and collect coefficients
models <- GPU %>%
group_by(Quartile) %>%
do(model = lm(Log_Score ~ ReleaseDate, data = .))
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("lubridate")) install.packages("lubridate")
if (!require("dplyr")) install.packages("dplyr")
if (!require("purrr")) install.packages("purr")
if (!require("broom")) install.packages("broom")
# Read the data
CPU <- read.csv("../final_data/CPU.csv")
GPU <- read.csv("../final_data/GPU.csv")
Disk <- read.csv("../final_data/Disk.csv")
Memory <- read.csv("../final_data/Memory.csv")
# Convert 'ReleaseDate' and 'CurrentDate' to Date objects and create 'Log_Score'
CPU <- CPU %>%
mutate(
ReleaseDate = as.Date(ReleaseDate),
CurrentDate = as.Date(CurrentDate),
Log_Score = log(Score)
)
# Fit a linear regression model for each Quantile and collect coefficients
models <- CPU %>%
group_by(Quantile) %>%
do(model = lm(Log_Score ~ ReleaseDate, data = .))
# Get the summary of each model and tidy it up into a data frame
model_summaries <- models %>%
pull(model) %>%
map(~ summary(.x)) %>%
map_dfr(~ tidy(.x), .id = "Quantile")
# Print the model summaries for each Quantile
print(model_summaries)
# Plot the regression line and data for each Quantile
ggplot(CPU, aes(x = ReleaseDate, y = Log_Score, color = Quantile)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", aes(fill = Quantile), se = FALSE) +
scale_color_manual(values = c("red", "green", "blue")) +
scale_fill_manual(values = c("red", "green", "blue")) +
labs(title = "CPU: Log Score vs. Release Date",
x = "Release date", y = "Log Score") +
theme_minimal()
# Convert 'ReleaseDate' and 'CurrentDate' to Date objects and create 'Log_Score'
GPU <- GPU %>%
mutate(
ReleaseDate = as.Date(ReleaseDate),
CurrentDate = as.Date(CurrentDate),
Log_Score = log(Score)
)
# Fit a linear regression model for each Quantile and collect coefficients
models <- GPU %>%
group_by(Quantile) %>%
do(model = lm(Log_Score ~ ReleaseDate, data = .))
# Get the summary of each model and tidy it up into a data frame
model_summaries <- models %>%
pull(model) %>%
map(~ summary(.x)) %>%
map_dfr(~ tidy(.x), .id = "Quantile")
# Print the model summaries for each Quantile
print(model_summaries)
# Plot the regression line and data for each Quantile
ggplot(GPU, aes(x = ReleaseDate, y = Log_Score, color = Quantile)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", aes(fill = Quantile), se = FALSE) +
scale_color_manual(values = c("red", "green", "blue", "purple")) +
scale_fill_manual(values = c("red", "green", "blue", "purple")) +
labs(title = "GPU: Log Score vs. Release Date",
x = "Release Date", y = "Log Score") +
theme_minimal()
# Convert 'ReleaseDate' and 'CurrentDate' to Date objects and create 'Log_Score'
Disk <- Disk %>%
mutate(
ReleaseDate = as.Date(ReleaseDate),
CurrentDate = as.Date(CurrentDate),
Log_Score = log(Score)
)
# Fit a linear regression model for each Quantile and collect coefficients
models <- Disk %>%
group_by(Quantile) %>%
do(model = lm(Log_Score ~ ReleaseDate, data = .))
# Get the summary of each model and tidy it up into a data frame
model_summaries <- models %>%
pull(model) %>%
map(~ summary(.x)) %>%
map_dfr(~ tidy(.x), .id = "Quantile")
# Print the model summaries for each Quantile
print(model_summaries)
# Plot the regression line and data for each Quantile
ggplot(Disk, aes(x = ReleaseDate, y = Log_Score, color = Quantile)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", aes(fill = Quantile), se = FALSE) +
scale_color_manual(values = c("red", "green", "blue", "purple")) +
scale_fill_manual(values = c("red", "green", "blue", "purple")) +
labs(title = "Disk: Log Score vs. Release Date",
x = "Release Date", y = "Log Score") +
theme_minimal()
# Convert 'ReleaseDate' and 'CurrentDate' to Date objects and create 'Log_Score'
Memory <- Memory %>%
mutate(
ReleaseDate = as.Date(ReleaseDate),
CurrentDate = as.Date(CurrentDate),
Log_Score = log(Score)
)
# Fit a linear regression model for each Quantile and collect coefficients
models <- Memory %>%
group_by(Quantile) %>%
do(model = lm(Log_Score ~ ReleaseDate, data = .))
# Get the summary of each model and tidy it up into a data frame
model_summaries <- models %>%
pull(model) %>%
map(~ summary(.x)) %>%
map_dfr(~ tidy(.x), .id = "Quantile")
# Print the model summaries for each Quantile
print(model_summaries)
# Plot the regression line and data for each Quantile
ggplot(Memory, aes(x = ReleaseDate, y = Log_Score, color = Quantile)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", aes(fill = Quantile), se = FALSE) +
scale_color_manual(values = c("red", "green", "blue", "purple")) +
scale_fill_manual(values = c("red", "green", "blue", "purple")) +
labs(title = "Memory: Log Score vs. Release Date",
x = "Release Date", y = "Log Score") +
theme_minimal()
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("dplyr")) install.packages("dplyr")
CPU <- read.csv("../final_data/CPU.csv")
CPU$ReleaseDate <- as.Date(CPU$ReleaseDate, format = "%Y-%m-%d")
CPU$CurrentDate <- as.Date(CPU$CurrentDate, format = "%Y-%m-%d")
CPU$Score <- as.numeric(CPU$Score)
CPU$X.1 <- NULL
CPU$X <- NULL
summary(CPU)
GPU <- read.csv("../final_data/GPU.csv")
GPU$ReleaseDate <- as.Date(GPU$ReleaseDate, format = "%Y-%m-%d")
GPU$CurrentDate <- as.Date(GPU$CurrentDate, format = "%Y-%m-%d")
GPU$Score <- as.numeric(GPU$Score)
GPU$X.1 <- NULL
GPU$X <- NULL
summary(GPU)
Disk <- read.csv("../final_data/Disk.csv")
Disk$ReleaseDate <- as.Date(Disk$ReleaseDate, format = "%Y-%m-%d")
Disk$CurrentDate <- as.Date(Disk$CurrentDate, format = "%Y-%m-%d")
Disk$Score <- as.numeric(Disk$Score)
Disk$X.1 <- NULL
Disk$X <- NULL
summary(Disk)
Memory <- read.csv("../final_data/Memory.csv")
Memory$ReleaseDate <- as.Date(Memory$ReleaseDate, format = "%Y-%m-%d")
Memory$CurrentDate <- as.Date(Memory$CurrentDate, format = "%Y-%m-%d")
Memory$Score <- as.numeric(Memory$Score)
Memory$X.1 <- NULL
Memory$X <- NULL
summary(Memory)
ggplot(CPU, aes(x=AdjustedReleasePrice)) +
geom_histogram(bins=30, fill="lightblue", color="black") +
labs(title="CPU MSRP Prices", x="Price", y="Frequency") +
theme_minimal()
ggplot(GPU, aes(x=AdjustedReleasePrice)) +
geom_histogram(bins=30, fill="lightblue", color="black") +
labs(title="GPU MSRP Prices", x="Price", y="Frequency") +
theme_minimal()
ggplot(Disk, aes(x=AdjustedReleasePrice)) +
geom_histogram(bins=30, fill="lightblue", color="black") +
labs(title="Disk MSRP Prices", x="Price", y="Frequency") +
theme_minimal()
ggplot(Memory, aes(x=AdjustedReleasePrice)) +
geom_histogram(bins=30, fill="lightblue", color="black") +
labs(title="Memory MSRP Prices", x="Price", y="Frequency") +
theme_minimal()
ggplot(CPU, aes(x=Score)) +
geom_histogram(bins=30, fill="lightblue", color="black") +
labs(title="CPU MSRP Prices", x="Price", y="Frequency") +
theme_minimal()
ggplot(GPU, aes(x=Score)) +
geom_histogram(bins=30, fill="lightblue", color="black") +
labs(title="GPU MSRP Prices", x="Price", y="Frequency") +
theme_minimal()
ggplot(Disk, aes(x=Score)) +
geom_histogram(bins=30, fill="lightblue", color="black") +
labs(title="Disk MSRP Prices", x="Price", y="Frequency") +
theme_minimal()
ggplot(Memory, aes(x=Score)) +
geom_histogram(bins=30, fill="lightblue", color="black") +
labs(title="Memory MSRP Prices", x="Price", y="Frequency") +
theme_minimal()
cpu_summary <- CPU %>% group_by(Quartile) %>% summarize(AvgPrice = mean(AdjustedReleasePrice))
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("dplyr")) install.packages("dplyr")
CPU <- read.csv("../final_data/CPU.csv")
CPU$ReleaseDate <- as.Date(CPU$ReleaseDate, format = "%Y-%m-%d")
CPU$CurrentDate <- as.Date(CPU$CurrentDate, format = "%Y-%m-%d")
CPU$Score <- as.numeric(CPU$Score)
CPU$X.1 <- NULL
CPU$X <- NULL
summary(CPU)
GPU <- read.csv("../final_data/GPU.csv")
GPU$ReleaseDate <- as.Date(GPU$ReleaseDate, format = "%Y-%m-%d")
GPU$CurrentDate <- as.Date(GPU$CurrentDate, format = "%Y-%m-%d")
GPU$Score <- as.numeric(GPU$Score)
GPU$X.1 <- NULL
GPU$X <- NULL
summary(GPU)
Disk <- read.csv("../final_data/Disk.csv")
Disk$ReleaseDate <- as.Date(Disk$ReleaseDate, format = "%Y-%m-%d")
Disk$CurrentDate <- as.Date(Disk$CurrentDate, format = "%Y-%m-%d")
Disk$Score <- as.numeric(Disk$Score)
Disk$X.1 <- NULL
Disk$X <- NULL
summary(Disk)
Memory <- read.csv("../final_data/Memory.csv")
Memory$ReleaseDate <- as.Date(Memory$ReleaseDate, format = "%Y-%m-%d")
Memory$CurrentDate <- as.Date(Memory$CurrentDate, format = "%Y-%m-%d")
Memory$Score <- as.numeric(Memory$Score)
Memory$X.1 <- NULL
Memory$X <- NULL
summary(Memory)
ggplot(CPU, aes(x=AdjustedReleasePrice)) +
geom_histogram(bins=30, fill="lightblue", color="black") +
labs(title="CPU MSRP Prices", x="Price", y="Frequency") +
theme_minimal()
ggplot(GPU, aes(x=AdjustedReleasePrice)) +
geom_histogram(bins=30, fill="lightblue", color="black") +
labs(title="GPU MSRP Prices", x="Price", y="Frequency") +
theme_minimal()
ggplot(Disk, aes(x=AdjustedReleasePrice)) +
geom_histogram(bins=30, fill="lightblue", color="black") +
labs(title="Disk MSRP Prices", x="Price", y="Frequency") +
theme_minimal()
ggplot(Memory, aes(x=AdjustedReleasePrice)) +
geom_histogram(bins=30, fill="lightblue", color="black") +
labs(title="Memory MSRP Prices", x="Price", y="Frequency") +
theme_minimal()
ggplot(CPU, aes(x=Score)) +
geom_histogram(bins=30, fill="lightblue", color="black") +
labs(title="CPU MSRP Prices", x="Price", y="Frequency") +
theme_minimal()
ggplot(GPU, aes(x=Score)) +
geom_histogram(bins=30, fill="lightblue", color="black") +
labs(title="GPU MSRP Prices", x="Price", y="Frequency") +
theme_minimal()
ggplot(Disk, aes(x=Score)) +
geom_histogram(bins=30, fill="lightblue", color="black") +
labs(title="Disk MSRP Prices", x="Price", y="Frequency") +
theme_minimal()
ggplot(Memory, aes(x=Score)) +
geom_histogram(bins=30, fill="lightblue", color="black") +
labs(title="Memory MSRP Prices", x="Price", y="Frequency") +
theme_minimal()
cpu_summary <- CPU %>% group_by(Quartile) %>% summarize(AvgPrice = mean(AdjustedReleasePrice))
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("dplyr")) install.packages("dplyr")
CPU <- read.csv("../final_data/CPU.csv")
CPU$ReleaseDate <- as.Date(CPU$ReleaseDate, format = "%Y-%m-%d")
CPU$CurrentDate <- as.Date(CPU$CurrentDate, format = "%Y-%m-%d")
CPU$Score <- as.numeric(CPU$Score)
CPU$X.1 <- NULL
CPU$X <- NULL
summary(CPU)
GPU <- read.csv("../final_data/GPU.csv")
GPU$ReleaseDate <- as.Date(GPU$ReleaseDate, format = "%Y-%m-%d")
GPU$CurrentDate <- as.Date(GPU$CurrentDate, format = "%Y-%m-%d")
GPU$Score <- as.numeric(GPU$Score)
GPU$X.1 <- NULL
GPU$X <- NULL
summary(GPU)
Disk <- read.csv("../final_data/Disk.csv")
Disk$ReleaseDate <- as.Date(Disk$ReleaseDate, format = "%Y-%m-%d")
Disk$CurrentDate <- as.Date(Disk$CurrentDate, format = "%Y-%m-%d")
Disk$Score <- as.numeric(Disk$Score)
Disk$X.1 <- NULL
Disk$X <- NULL
summary(Disk)
Memory <- read.csv("../final_data/Memory.csv")
Memory$ReleaseDate <- as.Date(Memory$ReleaseDate, format = "%Y-%m-%d")
Memory$CurrentDate <- as.Date(Memory$CurrentDate, format = "%Y-%m-%d")
Memory$Score <- as.numeric(Memory$Score)
Memory$X.1 <- NULL
Memory$X <- NULL
summary(Memory)
ggplot(CPU, aes(x=AdjustedReleasePrice)) +
geom_histogram(bins=30, fill="lightblue", color="black") +
labs(title="CPU MSRP Prices", x="Price", y="Frequency") +
theme_minimal()
ggplot(GPU, aes(x=AdjustedReleasePrice)) +
geom_histogram(bins=30, fill="lightblue", color="black") +
labs(title="GPU MSRP Prices", x="Price", y="Frequency") +
theme_minimal()
ggplot(Disk, aes(x=AdjustedReleasePrice)) +
geom_histogram(bins=30, fill="lightblue", color="black") +
labs(title="Disk MSRP Prices", x="Price", y="Frequency") +
theme_minimal()
ggplot(Memory, aes(x=AdjustedReleasePrice)) +
geom_histogram(bins=30, fill="lightblue", color="black") +
labs(title="Memory MSRP Prices", x="Price", y="Frequency") +
theme_minimal()
ggplot(CPU, aes(x=Score)) +
geom_histogram(bins=30, fill="lightblue", color="black") +
labs(title="CPU MSRP Prices", x="Price", y="Frequency") +
theme_minimal()
ggplot(GPU, aes(x=Score)) +
geom_histogram(bins=30, fill="lightblue", color="black") +
labs(title="GPU MSRP Prices", x="Price", y="Frequency") +
theme_minimal()
ggplot(Disk, aes(x=Score)) +
geom_histogram(bins=30, fill="lightblue", color="black") +
labs(title="Disk MSRP Prices", x="Price", y="Frequency") +
theme_minimal()
ggplot(Memory, aes(x=Score)) +
geom_histogram(bins=30, fill="lightblue", color="black") +
labs(title="Memory MSRP Prices", x="Price", y="Frequency") +
theme_minimal()
cpu_summary <- CPU %>% group_by(Quantile) %>% summarize(AvgPrice = mean(AdjustedReleasePrice))
gpu_summary <- GPU %>% group_by(Quantile) %>% summarize(AvgPrice = mean(AdjustedReleasePrice))
disk_summary <- Disk %>% group_by(Quantile) %>% summarize(AvgPrice = mean(AdjustedReleasePrice))
memory_summary <- Memory %>% group_by(Quantile) %>% summarize(AvgPrice = mean(AdjustedReleasePrice))
# Combining data
combined_data <- rbind(data.frame(Component = 'CPU', Quantile = cpu_summary$Quantile, Price = cpu_summary$AvgPrice),
data.frame(Component = 'GPU', Quantile = gpu_summary$Quantile, Price = gpu_summary$AvgPrice),
data.frame(Component = 'Disk', Quantile = disk_summary$Quantile, Price = disk_summary$AvgPrice),
data.frame(Component = 'Memory', Quantile = memory_summary$Quantile, Price = memory_summary$AvgPrice))
# Creating the plot
ggplot(combined_data, aes(x = Component, y = Price, fill = Quantile)) +
geom_bar(stat = "identity", position = position_dodge()) +
theme_minimal() +
labs(title = "Component Launch Prices per Quantile", x = "Component", y = "Price") +
scale_fill_brewer(palette = "Set1") +
theme(plot.title = element_text(hjust = 0.5))
